import os
import json
import datetime
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"TELEGRAM_BOT_TOKEN: {'‚úÖ' if os.getenv('TELEGRAM_BOT_TOKEN') else '‚ùå'}")
print(f"ADMIN_CHAT_ID: {'‚úÖ' if os.getenv('ADMIN_CHAT_ID') else '‚ùå'}")
print(f"VOLLEYBALL_CHAT_ID: {'‚úÖ' if os.getenv('VOLLEYBALL_CHAT_ID') else '‚ùå'}")
print(f"ORGANIZER_CHAT_ID: {'‚úÖ' if os.getenv('ORGANIZER_CHAT_ID') else '‚ùå'}")
print(f"PAYMENT_PHONE: {'‚úÖ' if os.getenv('PAYMENT_PHONE') else '‚ùå'}")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError(
        "TELEGRAM_BOT_TOKEN not found in environment variables. Please set it."
    )

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
if not ADMIN_CHAT_ID:
    raise ValueError(
        "ADMIN_CHAT_ID not found in environment variables. Please set it."
    )

VOLLEYBALL_CHAT_ID = os.getenv("VOLLEYBALL_CHAT_ID")
if not VOLLEYBALL_CHAT_ID:
    print(f"‚ùå VOLLEYBALL_CHAT_ID: '{VOLLEYBALL_CHAT_ID}'")
    raise ValueError(
        "VOLLEYBALL_CHAT_ID not found in environment variables. Please set it."
    )
else:
    print(f"‚úÖ VOLLEYBALL_CHAT_ID loaded: {VOLLEYBALL_CHAT_ID}")

ORGANIZER_CHAT_ID = os.getenv("ORGANIZER_CHAT_ID")
if not ORGANIZER_CHAT_ID:
    raise ValueError(
        "ORGANIZER_CHAT_ID not found in environment variables. Please set it."
    )

PAYMENT_INFORMATION = os.getenv("PAYMENT_INFORMATION")
if not PAYMENT_INFORMATION:
    raise ValueError(
        "PAYMENT_INFORMATION not found in environment variables. Please set it."
    )

DATA_FILE = "/app/data/players.json"
GAME_DAY = "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
REGISTRATION_OPEN = True
# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å user_id, first_name, last_name, username
players: list[dict[str, str | int]] = []
pending_confirmations = set()
MAX_PLAYERS = 12

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
waiting_organizer_response = False


# ---------------- üìÅ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º ----------------

def load_players():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            players[:] = data
            print("‚úÖ –ò–≥—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
    except FileNotFoundError:
        players.clear()


def save_players():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(players, f, ensure_ascii=False)


# ---------------- ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ----------------

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("üì§ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤")]
    ],
    resize_keyboard=True
)


def is_registered(user_id):
    return any(p['user_id'] == user_id for p in players)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! "
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª–µ–π–±–æ–ª—å–Ω—ã–π –±–æ—Ç üèê",
        reply_markup=main_keyboard
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global waiting_organizer_response
    
    user = update.effective_user
    text = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    if str(user.id) == ORGANIZER_CHAT_ID and waiting_organizer_response:
        if text.lower() in ["–¥–∞", "yes"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç –≤–æ–ª–µ–π–±–æ–ª–∞
            await context.bot.send_message(
                chat_id=VOLLEYBALL_CHAT_ID,
                text=f"–í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–æ–º–µ—Ä {PAYMENT_INFORMATION}."
            )
            waiting_organizer_response = False
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!")
        elif text.lower() in ["–Ω–µ—Ç", "no"]:
            waiting_organizer_response = False
            await update.message.reply_text("‚úÖ –•–æ—Ä–æ—à–æ, –∏–≥—Ä–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'")
        return

    # –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∏
    if not user.first_name:
        await update.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –≤ Telegram. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        )
        return

    if text == "üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        if not REGISTRATION_OPEN:
            await update.message.reply_text("‚õîÔ∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
            return
        if is_registered(user.id):
            await update.message.reply_text("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã ‚úÖ")
        elif len(players) >= MAX_PLAYERS:
            await update.message.reply_text(
                "‚õîÔ∏è –í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã! –ú–∞–∫—Å–∏–º—É–º 12 —á–µ–ª–æ–≤–µ–∫."
            )
        else:
            pending_confirmations.add(user.id)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç")]],
                resize_keyboard=True
            )
            await update.message.reply_text(
                f"–í–æ–ª–µ–π–±–æ–ª –±—É–¥–µ—Ç –≤ {GAME_DAY}. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                reply_markup=keyboard
            )

    elif text == "üì§ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        if is_registered(user.id):
            players[:] = [p for p in players if p['user_id'] != user.id]
            save_players()
            await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤–æ–ª–µ–π–±–æ–ª–∞.")
            await context.bot.send_message(
                chat_id=VOLLEYBALL_CHAT_ID,
                text=(
                    f"‚ö†Ô∏è {user.first_name} "
                    f"{user.last_name or ''} –æ—Å–≤–æ–±–æ–¥–∏–ª –º–µ—Å—Ç–æ –Ω–∞ "
                    "–≤–æ–ª–µ–π–±–æ–ª."
                )
            )
        else:
            await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã.")

    elif text == "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤":
        if players:
            player_list = "\n".join(
                [
                    f"{i+1}. {p['first_name']} {p['last_name']} "
                    f"(@{p.get('username', '')})".strip()
                    for i, p in enumerate(players)
                ]
            )
            await update.message.reply_text(
                f"üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n{player_list}"
            )
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

    elif text == "‚úÖ –î–∞":
        if user.id in pending_confirmations:
            if len(players) >= MAX_PLAYERS:
                await update.message.reply_text(
                    "‚õîÔ∏è –í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã! –ú–∞–∫—Å–∏–º—É–º 12 —á–µ–ª–æ–≤–µ–∫.",
                    reply_markup=main_keyboard
                )
            elif is_registered(user.id):
                await update.message.reply_text(
                    "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã ‚úÖ",
                    reply_markup=main_keyboard
                )
            else:
                players.append({
                    'user_id': user.id,
                    'first_name': user.first_name,
                    'last_name': user.last_name or "",
                    'username': user.username or ""
                })
                save_players()
                pending_confirmations.remove(user.id)
                await update.message.reply_text(
                    f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–æ–ª–µ–π–±–æ–ª –≤ {GAME_DAY}! ‚úÖ",
                    reply_markup=main_keyboard
                )
                await context.bot.send_message(
                    chat_id=VOLLEYBALL_CHAT_ID,
                    text=(
                        f"üì• {user.first_name} "
                        f"{user.last_name or ''} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–æ–ª–µ–π–±–æ–ª."
                    )
                )
        else:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ 'üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.",
                reply_markup=main_keyboard
            )

    elif text == "‚ùå –ù–µ—Ç":
        if user.id in pending_confirmations:
            pending_confirmations.remove(user.id)
            await update.message.reply_text(
                "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=main_keyboard
            )
        else:
            await update.message.reply_text(
                "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.",
                reply_markup=main_keyboard
            )

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."
        )


# ---------------- ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------------

async def reminder_job(app):
    global REGISTRATION_OPEN, waiting_organizer_response

    while True:
        now = datetime.datetime.now()

        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 17:00 - –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
        if now.weekday() == 6 and now.hour == 17 and now.minute == 0:
            waiting_organizer_response = True
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]],
                resize_keyboard=True
            )
            await app.bot.send_message(
                chat_id=ORGANIZER_CHAT_ID,
                text="–ë—ã–ª–∞ –ª–∏ –∏–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è?",
                reply_markup=keyboard
            )
            print("‚ùì –ó–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∏–≥—Ä—ã")
            await asyncio.sleep(60)

        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 12:00 - –æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∏
        if now.weekday() == 0 and now.hour == 12 and now.minute == 0:
            REGISTRATION_OPEN = True
            await app.bot.send_message(
                chat_id=VOLLEYBALL_CHAT_ID,
                text="–ó–∞–ø–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –æ—Ç–∫—Ä—ã—Ç–∞, –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è!"
            )
            print("üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏")
            await asyncio.sleep(60)

        # –°—É–±–±–æ—Ç–∞ 11:00 - –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        if now.weekday() == 5 and now.hour == 11 and now.minute == 0:
            REGISTRATION_OPEN = False
            print("üîí –ó–∞–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            for player in players:
                try:
                    await app.bot.send_message(
                        chat_id=player['user_id'],
                        text="üí∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–æ–ª–µ–π–±–æ–ª!"
                    )
                except Exception:
                    pass
            await asyncio.sleep(60)

        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00 - –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        if now.weekday() == 6 and now.hour == 20 and now.minute == 0:
            print("üßπ –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.")
            for player in players:
                try:
                    await app.bot.send_message(
                        chat_id=player['user_id'],
                        text="‚úÖ –í–æ–ª–µ–π–±–æ–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω."
                    )
                except Exception:
                    pass
            players.clear()
            save_players()
            REGISTRATION_OPEN = True
            await asyncio.sleep(60)

        await asyncio.sleep(30)


# ---------------- üîß –ó–∞–ø—É—Å–∫ ----------------

async def main():
    load_players()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    app.create_task(reminder_job(app))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
