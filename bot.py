import os
import json
import datetime
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables. Please set it.")

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID not found in environment variables. Please set it.")

# –§–∞–π–ª —Å –∏–≥—Ä–æ–∫–∞–º–∏
DATA_FILE = "/app/data/players.json"
# –î–µ–Ω—å –∏–≥—Ä—ã
GAME_DAY = "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
REGISTRATION_OPEN = True
players = set()
pending_confirmations = set()

# ---------------- üìÅ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º ----------------
def load_players():
    global players
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            players = set(data)
            print("‚úÖ –ò–≥—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
    except FileNotFoundError:
        players = set()

def save_players():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(list(players), f)

# ---------------- ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ----------------
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("üì§ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤")]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª–µ–π–±–æ–ª—å–Ω—ã–π –±–æ—Ç üèê",
        reply_markup=main_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global REGISTRATION_OPEN
    user = update.effective_user
    text = update.message.text

    if not user.username:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    if text == "üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        if not REGISTRATION_OPEN:
            await update.message.reply_text("‚õîÔ∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
            return
        if user.username in players:
            await update.message.reply_text("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã ‚úÖ")
        else:
            pending_confirmations.add(user.id)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç")]],
                resize_keyboard=True
            )
            await update.message.reply_text(
                f"–í–æ–ª–µ–π–±–æ–ª –±—É–¥–µ—Ç –≤ {GAME_DAY}. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                reply_markup=keyboard
            )

    elif text == "üì§ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        if user.username in players:
            players.remove(user.username)
            save_players()
            await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤–æ–ª–µ–π–±–æ–ª–∞.")
            for chat in players:
                try:
                    await context.bot.send_message(chat_id=f"@{chat}", text=f"‚ö†Ô∏è @{user.username} –æ—Å–≤–æ–±–æ–¥–∏–ª –º–µ—Å—Ç–æ –Ω–∞ –≤–æ–ª–µ–π–±–æ–ª.")
                except:
                    pass
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì§ @{user.username} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≤–æ–ª–µ–π–±–æ–ª–∞."
            )
        else:
            await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã.")

    elif text == "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤":
        if players:
            player_list = "\n".join([f"{i+1}. @{p}" for i, p in enumerate(players)])
            await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n{player_list}")
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

    elif text == "‚úÖ –î–∞":
        if user.id in pending_confirmations:
            players.add(user.username)
            save_players()
            pending_confirmations.remove(user.id)
            await update.message.reply_text(
                f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–æ–ª–µ–π–±–æ–ª –≤ {GAME_DAY}! ‚úÖ",
                reply_markup=main_keyboard
            )
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì• @{user.username} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–æ–ª–µ–π–±–æ–ª."
            )
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ 'üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=main_keyboard)

    elif text == "‚ùå –ù–µ—Ç":
        if user.id in pending_confirmations:
            pending_confirmations.remove(user.id)
            await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard)
        else:
            await update.message.reply_text("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.", reply_markup=main_keyboard)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

# ---------------- ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------------
async def reminder_job(app):
    global REGISTRATION_OPEN

    while True:
        now = datetime.datetime.now()

        if now.weekday() == 5 and now.hour == 11 and now.minute == 0:
            REGISTRATION_OPEN = False
            print("üîí –ó–∞–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            for username in players:
                try:
                    await app.bot.send_message(chat_id=f"@{username}", text="üí∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–æ–ª–µ–π–±–æ–ª!")
                except:
                    pass
            await asyncio.sleep(60)

        if now.weekday() == 6 and now.hour == 20 and now.minute == 0:
            print("üßπ –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.")
            for username in players:
                try:
                    await app.bot.send_message(chat_id=f"@{username}", text="‚úÖ –í–æ–ª–µ–π–±–æ–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω.")
                except:
                    pass
            players.clear()
            save_players()
            REGISTRATION_OPEN = True
            await asyncio.sleep(60)

        await asyncio.sleep(30)

# ---------------- üîß –ó–∞–ø—É—Å–∫ ----------------
async def main():
    load_players()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.create_task(reminder_job(app))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())